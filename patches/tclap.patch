diff --git a/CMakeLists.txt b/CMakeLists.txt
index c2c9a26..e40e55a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -4,10 +4,12 @@ project(TCLAP VERSION 1.4.0 LANGUAGES CXX)
 
 set(CMAKE_CXX_STANDARD 98)
 set(CMAKE_CXX_STANDARD_REQUIRED True)
-add_definitions(-DHAVE_TCLAP_CONFIG_H)
 
-enable_testing()
-include(CTest)
+option(TCLAP_TESTS "enable tclap tests" OFF)
+option(TCLAP_EXAMPLES "enable tclap examples" OFF)
+option(TCLAP_DOCS "enable tclap documentation" OFF)
+
+add_definitions(-DHAVE_TCLAP_CONFIG_H)
 
 include(CheckCXXSourceCompiles)
 check_cxx_source_compiles("#include <strstream>
@@ -18,14 +20,23 @@ int main() { std::istringstream iss; }" TCLAP_HAVE_SSTREAM)
 
 configure_file(config.h.in tclap/TCLAPConfig.h)
 
-add_library(TCLAP INTERFACE)
+file(GLOB tclap_headers include/tclap/*.h)
+add_library(TCLAP INTERFACE ${tclap_headers})
 target_include_directories(TCLAP INTERFACE include/)
-install(TARGETS TCLAP DESTINATION include)
-install(FILES "${PROJECT_BINARY_DIR}/tclap/TCLAPConfig.h"
-  DESTINATION include/tclap
-  )
-
-add_subdirectory(docs)
-add_subdirectory(examples)
-add_subdirectory(tests)
-add_subdirectory(include/tclap)
+#install(TARGETS TCLAP DESTINATION include)
+#install(FILES "${PROJECT_BINARY_DIR}/tclap/TCLAPConfig.h"
+#  DESTINATION include/tclap
+#  )
+
+if(TCLAP_DOCS)
+	add_subdirectory(docs)
+endif()
+if(TCLAP_EXAMPLES)
+	add_subdirectory(examples)
+endif()
+if(TCLAP_TESTS)
+	enable_testing()
+	include(CTest)
+	add_subdirectory(tests)
+endif()
+#add_subdirectory(include/tclap)
diff --git a/include/tclap/CmdLine.h b/include/tclap/CmdLine.h
index d75a944..c9e6177 100644
--- a/include/tclap/CmdLine.h
+++ b/include/tclap/CmdLine.h
@@ -346,17 +346,18 @@ inline void CmdLine::_constructor() {
     _autoArgs.setParser(*this);
     // add(_autoArgs);
 
-    v = new IgnoreRestVisitor(*this);
-    SwitchArg *ignore = new SwitchArg(
-        Arg::flagStartString(), Arg::ignoreNameString(),
-        "Ignores the rest of the labeled arguments following this flag.", false,
-        v);
-    _deleteOnExit(ignore);
-    _deleteOnExit(v);
-    _autoArgs.add(ignore);
-    addToArgList(ignore);
-
     if (_helpAndVersion) {
+        v = new IgnoreRestVisitor(*this);
+        SwitchArg *ignore = new SwitchArg(
+            Arg::flagStartString(), Arg::ignoreNameString(),
+            "Ignores the rest of the labeled arguments following this flag.", false,
+            v);
+        _deleteOnExit(ignore);
+        _deleteOnExit(v);
+        _autoArgs.add(ignore);
+        addToArgList(ignore);
+
+    
         v = new HelpVisitor(this, &_output);
         SwitchArg *help = new SwitchArg(
             "h", "help", "Displays usage information and exits.", false, v);
